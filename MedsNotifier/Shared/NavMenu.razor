@inject AuthenticationStateProvider AuthProvider
@using System.Security.Claims
<nav id="main-nav">
    <ul>
        <li id="account-header">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="home-outline"></ion-icon></span> @username
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="diary" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="book-outline"></ion-icon></span> My Diary
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="meds" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="medkit-outline"></ion-icon></span> My Meds
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="settings" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="settings-outline"></ion-icon></span> Settings
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="recommendations" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="compass-outline"></ion-icon></span><span id="last-nav-link"> Recommendations</span>
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="logout" Match="NavLinkMatch.All">
                <span class="icon"><ion-icon name="log-out-outline"></ion-icon></span><span id="last-nav-link">Logout</span>
            </NavLink>
        </li>
    </ul>
</nav>

@code
{
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string username { get; set; } = "Guest";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if(user.Identity.IsAuthenticated)
        username = user.Claims.ToList().FirstOrDefault(u => u.Type == ClaimTypes.Name)?.Value;
    }

}