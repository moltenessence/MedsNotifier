@using Microsoft.AspNetCore.Components.Routing
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using MedsNotifier
@using MedsNotifier.Shared
@using MedsNotifier.Services

@inject AuthenticationStateProvider stateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeView>
                <Authorized>
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                </Authorized>
                <NotAuthorized>
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(LoginLayout)" />
                </NotAuthorized>
            </AuthorizeView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(NotFoundLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{

    [Inject]
    public LocalStorageService localStorageService{ get; set; }

    //protected async override Task OnParametersSetAsync()
    //{
    //    await localStorageService.RemoveItem("Authorization");
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //   if(firstRender) await localStorageService.RemoveItem("Authorization");
    //}
}
