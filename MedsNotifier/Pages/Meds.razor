@using MedsNotifier.Services
@using MedsNotifier.Data.Models
@using System.Security.Claims
@page "/meds"
@layout MainLayout
@attribute [Authorize]

<h2>Meds</h2>

<div class="meds-page-wrapper">
    @if (MedsList == null)
    {
        <div class="empty-list">
            <img height="400" width="380" src="https://sun9-6.userapi.com/s/v1/ig2/Lv_1ccUqPtCfwqFSvYCOLOURQw-pOzUmIZ7kafQGsgu2LScy9ojGuFQjqGvDz1oDUM8W_vAti-dInm0AAnWm74Az.jpg?size=800x600&quality=96&type=album" alt="" >
        </div>
    }

    else
    {
<div class="meds-info">
    @foreach (var medication in MedsList)
    {
    <div  class="meds-block-info">
        <ul>
            <li color="@medication.Color" class="meds-name"> Title: @medication.Name</li>
            <li class="meds-type">Type: @medication.MedsType</li>
            <li class="meds-text-info"> Description: @medication.Description</li>
            <li class="meds-text-info">Start: @medication.StartMedsDateTime</li>
            <li class="meds-text-info">Finish: @medication.FinishMedsDateTime</li>
        </ul>
        <div class="wrap-circles">
            <div class="circle per-25">
                <div class="inner">25%</div>
            </div>
        </div>
        </div>
    }

</div>
    }

<NavLink class="submit-button" href="meds/add" Match="NavLinkMatch.All"> Press here to start new course!</NavLink>
</div>
@code {
    [Inject]
    public IMedsService MedsService { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthProvider { get; set; }

    protected IEnumerable<MedsModel> MedsList { get; set; }
    protected ClaimsPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        user = state.User;
    }

    protected override async Task OnParametersSetAsync()
    {
         if (user.Identity.IsAuthenticated) MedsList = await MedsService.GetUserMedicineChest(user);
    }
}
