@using MedsNotifier.Services
@using MedsNotifier.Factories
@using MedsNotifier.Data.Models
@using System.Security.Claims
@page "/meds"
@layout MainLayout
@attribute [Authorize]


<h2 class="page-title">Meds</h2>
@if (confirmBoxOpen)
{
    <ConfirmRemovalBox ConfrimCallback="async (flag) => await OnConfirmRemoval(flag)" />
}
<div class="meds-page-wrapper">

    @if (MedsList == null)
    {
        <p class="empty-meds">You haven't started any courses yet.</p>
    }

    else
    {
        <div class="meds-info">
            @foreach (var medication in MedsList)
            {

                <div class="meds-block-info">
                    <ul>
                        <li color="@medication.Color" class="meds-title-@medication.Id.ToString()"> Title: @medication.Name</li>
                        <li class="meds-type">Type: @medication.MedsType</li>
                        <li class="meds-text-info"> Description: @medication.Description</li>
                        <li class="meds-text-info"> Doses Left: @medication.AmountOfDosesLeft</li>
                        <li class="meds-text-info">Start: @medication.StartMedsDateTime.ToShortDateString()</li>
                        <li class="meds-text-info">Finish: @medication.FinishMedsDateTime.ToShortDateString()</li>
                        <li class="info-message"> @medication?.InfoMessage</li>
                    </ul>
                    <div class="wrap-circles">
                        <div class="circle per-@GetPercent(medication)">
                            <div class="inner">@GetPercent(medication)%</div>
                        </div>
                    </div>
                    <ul>
                        <li class="meds-additional-text-info"> Last time you took meds: @medication.LastTimeMedsTaken.ToString()</li>
                        <li class="meds-additional-text-info">Daily amount of doses: @medication.DosesPerDayAmount</li>
                        <li class="meds-additional-text-info">Single Dosage: @medication.SingleDosage</li>
                        <li class="meds-additional-text-info">Total Dosage: @medication.TotalDosage</li>
                        <button class="meds-submit-button" type="submit" @onclick="() => OnTakeMeds(medication)">Take meds!</button>
                        <button class="meds-delete-button" type="submit" @onclick="() => { medsToDelete = medication; confirmBoxOpen = true;}">Delete course</button>
                    </ul>

                </div>

                <style>
        .circle.per-@GetPercent(medication)
        {
            background-image: conic-gradient(aquamarine @GetPercent(medication)%, #b0b0b0 0);
        }
        .meds-page-wrapper .meds-info .meds-block-info .meds-title-@medication.Id.ToString() {
            font-style: italic;
            font-size: 30px;
            margin-bottom: 5px;
            color: @medication.Color;
        }

                </style>
            }

        </div>
    }
    <NavLink class="submit-button" href="meds/add" Match="NavLinkMatch.All"> Press here to start new course!</NavLink>
</div>


@code {
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    IEntriesFactory EntriesFactory { get; set; }
    [Inject]
    public IDiaryService DiaryService { get; set; }
    [Inject]
    public IMedsService MedsService { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthProvider { get; set; }

    [Parameter]
    public IEnumerable<MedsModel> MedsList { get; set; }

    protected ClaimsPrincipal user { get; set; }
    protected DateTime lastTimeMedsTaken { get; set; }
    private bool confirmBoxOpen = false;
    private bool confirm = false;
    protected MedsModel medsToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        user = state.User;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (user.Identity.IsAuthenticated) MedsList = await MedsService.GetUserMedicineChest(user);
    }

    protected string GetPercent(MedsModel meds) => MedsService.GetCourseProgressProcentage(meds).ToString();


    protected async Task OnDeleteMeds(MedsModel meds)
    {
        await MedsService.DeleteMedsAsync(user, meds);
        NavigationManager.NavigateTo("/meds", true);
    }

    protected async Task OnTakeMeds(MedsModel meds)
    {
        if (meds.AmountOfDosesLeft == 0)
        {
            meds.InfoMessage = "You have finished this course. You can delete it if you don't wanna track it anymore!";
            return;
        }

        await MedsService.TakeMeds(user, meds);
        meds.AmountOfDosesLeft -= 1;
        meds.LastTimeMedsTaken = DateTime.Now;

        await DiaryService.AddDiaryEntryAsync(user, EntriesFactory.CreateDiaryEntry(meds));
    }

    protected async Task OnConfirmRemoval(bool flag)
    {
        confirm = flag;
        StateHasChanged();

        if(confirm) await OnDeleteMeds(medsToDelete);

        confirmBoxOpen = false;
    }
}
