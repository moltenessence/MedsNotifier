@attribute [Authorize]
@page "/meds/add"
@layout MainLayout
@using MedsNotifier.Services
@using MedsNotifier.Data.Models
@using System.Security.Claims
@using Smart.Blazor


<div class="meds-form-box">
    <h3>New meds course</h3>
    <EditForm Model="@medication" OnValidSubmit="@HandleSubmit" ChildContext Context="medsform">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>@message</p>
        <div class="input-fields">
            Name <InputText id="name" class="text-field" placeholder="Name" @bind-Value="medication.Name" />
            Description <InputText id="description" class="text-field" placeholder="Description" @bind-Value="medication.Description" />
            <label for="type">Type</label><InputSelect class="text-field" @bind-Value="medication.MedsType">
                @foreach (var type in Enum.GetValues(typeof(MedsType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
            Single Dosage<InputNumber id="single-dosage" class="text-field" placeholder="Single Dosage" @bind-Value="medication.SingleDosage" />
            Amount Of Doses Per A Day<InputNumber id="daily-dosage-amount" class="text-field" placeholder="Amount Of Daily Doses" @bind-Value="medication.DosesPerDayAmount" />
            Choose the date when your course finishes<Smart.Blazor.Calendar OnChange="OnCalendarChange"></Smart.Blazor.Calendar>
            Medication color<ColorPicker Editable="true" OnChange="OnColorChange"></ColorPicker>

        </div>
        <button class="submit-button" type="submit">Start!</button>
    </EditForm>
</div>

@code {
    private MedsModel medication = new();
    private string message;

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public IMedsService MedsService { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthProvider { get; set; }

    private async Task HandleSubmit()
    {
        medication.StartMedsDateTime = DateTime.Now;
        medication.TotalDosage = MedsService.CountTotalDosage(medication);
        medication.TotalAmountOfDoses = MedsService.CountTotalAmountOfDoses(medication);
        medication.AmountOfDosesLeft = medication.TotalAmountOfDoses;

        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        await MedsService.AddMedsToUserChest(user, medication);

        NavigationManager.NavigateTo("meds", true);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) message = "";
    }

    private void OnColorChange(Event ev)
    {
        ColorPickerChangeEventDetail detail = ev["Detail"];
        medication.Color = detail.Value;
    }
    private void OnCalendarChange(Event ev)
    {
        CalendarChangeEventDetail eventCallback = ev["Detail"];
        var dates = eventCallback.Value;

        var selectedDate = dates.ToList().FirstOrDefault();

        DateTime finishMedsDayTime;
        DateTime.TryParse(selectedDate, out finishMedsDayTime);
        medication.FinishMedsDateTime = finishMedsDayTime;
    }
}
